function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

import { LookerAppId } from './transport';
import { BrowserTransport } from './browserTransport';
import { OAuthSession } from './oauthSession';
import { BrowserServices } from './browserServices';
export class BrowserSession extends OAuthSession {
  constructor(settings, transport) {
    super(new BrowserServices({
      settings,
      transport: transport || new BrowserTransport(settings)
    }));
    this.settings = settings;
  }

  authenticate(props) {
    var _superprop_getAuthenticate = () => super.authenticate,
        _this = this;

    return _asyncToGenerator(function* () {
      props = yield _superprop_getAuthenticate().call(_this, props);

      if (_this.isAuthenticated()) {
        props.mode = 'cors';
        delete props.credentials;
        props.headers = {
          Authorization: "Bearer ".concat(_this.activeToken.access_token),
          [LookerAppId]: _this.settings.agentTag
        };
      }

      return props;
    })();
  }

}
//# sourceMappingURL=browserSession.js.map