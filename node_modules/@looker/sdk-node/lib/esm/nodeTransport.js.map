{"version":3,"sources":["../../src/nodeTransport.ts"],"names":["nodeCrypto","rq","rp","PassThrough","StatusCodeError","defaultTimeout","responseMode","ResponseMode","trace","LookerAppId","agentPrefix","safeBase64","BaseTransport","NodeCryptoHash","secureRandom","byteCount","randomBytes","toString","sha256Hash","message","hash","createHash","update","Uint8Array","digest","parseResponse","res","mode","contentType","utf8","result","body","string","match","Buffer","Object","JSON","parse","error","Promise","reject","NodeTransport","constructor","options","rawRequest","method","path","queryParams","authenticator","init","initRequest","req","promise","resTyped","url","String","headers","ok","statusCode","statusMessage","e","text","matches","exec","length","json","obj","from","data","stringify","makeUrl","request","parsed","value","type","requestor","props","toUpperCase","get","put","post","patch","head","stream","callback","returnPromise","streamPromise","resolve","hasResolved","on","err","code","socket","setKeepAlive","pipe","results","all","verifySsl","verify_ssl","timeout","agentTag","requestPath","undefined","encoding","rejectUnauthorized","resolveWithFullResponse"],"mappings":"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","sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2021 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport nodeCrypto from 'crypto'\nimport rq, { Request } from 'request'\n\nimport rp from 'request-promise-native'\nimport { PassThrough, Readable } from 'readable-stream'\nimport { StatusCodeError } from 'request-promise-native/errors'\nimport {\n  Authenticator,\n  defaultTimeout,\n  HttpMethod,\n  ISDKError,\n  ITransportSettings,\n  responseMode,\n  ResponseMode,\n  SDKResponse,\n  trace,\n  Values,\n  IRequestHeaders,\n  LookerAppId,\n  IRawResponse,\n  agentPrefix,\n  safeBase64,\n  BaseTransport,\n  ICryptoHash,\n} from '@looker/sdk-rtl'\n\nexport class NodeCryptoHash implements ICryptoHash {\n  secureRandom(byteCount: number): string {\n    return nodeCrypto.randomBytes(byteCount).toString('hex')\n  }\n\n  async sha256Hash(message: string): Promise<string> {\n    const hash = nodeCrypto.createHash('sha256')\n    hash.update(message)\n    return safeBase64(new Uint8Array(hash.digest()))\n  }\n}\n\nexport type RequestOptions = rq.RequiredUriUrl & rp.RequestPromiseOptions\n\nasync function parseResponse(res: IRawResponse) {\n  const mode = responseMode(res.contentType)\n  const utf8 = 'utf8'\n  let result = await res.body\n  if (mode === ResponseMode.string) {\n    if (res.contentType.match(/^application\\/.*\\bjson\\b/g)) {\n      try {\n        if (result instanceof Buffer) {\n          result = (result as Buffer).toString(utf8)\n        }\n        if (result instanceof Object) {\n          return result\n        }\n        return JSON.parse(result.toString())\n      } catch (error) {\n        return Promise.reject(error)\n      }\n    }\n    if (result instanceof Buffer) {\n      result = (result as Buffer).toString(utf8)\n    }\n    return result.toString()\n  } else {\n    try {\n      return (result as Buffer).toString('binary')\n    } catch (error) {\n      return Promise.reject(error)\n    }\n  }\n}\n\nexport class NodeTransport extends BaseTransport {\n  constructor(protected readonly options: ITransportSettings) {\n    super(options)\n  }\n\n  async rawRequest(\n    method: HttpMethod,\n    path: string,\n    queryParams?: Values,\n    body?: any,\n    authenticator?: Authenticator,\n    options?: Partial<ITransportSettings>\n  ): Promise<IRawResponse> {\n    const init = await this.initRequest(\n      method,\n      path,\n      queryParams,\n      body,\n      authenticator,\n      options\n    )\n    const req = rp(init).promise()\n    try {\n      const res = await req\n      const resTyped = res as rq.Response\n      return {\n        url: resTyped.url || '',\n        body: await resTyped.body,\n        contentType: String(resTyped.headers['content-type']),\n        ok: true,\n        statusCode: resTyped.statusCode,\n        statusMessage: resTyped.statusMessage,\n      }\n    } catch (e) {\n      const statusMessage = `${method} ${path}`\n      let statusCode = 404\n      let contentType = 'text'\n      let body: string\n      if (e instanceof StatusCodeError) {\n        statusCode = e.statusCode\n        const text = e.message\n        // Need to re-parse the error message\n        const matches = /^\\d+\\s*-\\s*({.*})/gim.exec(text)\n        if (matches && matches.length > 1) {\n          const json = matches[1]\n          const obj = JSON.parse(json)\n          body = Buffer.from(obj.data).toString('utf8')\n        } else {\n          body = e.message\n        }\n        body = `${statusMessage} ${body}`\n      } else if (e.error instanceof Buffer) {\n        body = Buffer.from(e.error).toString('utf8')\n      } else {\n        body = JSON.stringify(e)\n        contentType = 'application/json'\n      }\n      return {\n        url: this.makeUrl(path, { ...this.options, ...options }, queryParams),\n        body,\n        contentType,\n        ok: false,\n        statusCode,\n        statusMessage,\n      }\n    }\n  }\n\n  async request<TSuccess, TError>(\n    method: HttpMethod,\n    path: string,\n    queryParams?: Values,\n    body?: any,\n    authenticator?: Authenticator,\n    options?: Partial<ITransportSettings>\n  ): Promise<SDKResponse<TSuccess, TError>> {\n    try {\n      const res = await this.rawRequest(\n        method,\n        path,\n        queryParams,\n        body,\n        authenticator,\n        options\n      )\n      const parsed = await parseResponse(res)\n      if (this.ok(res)) {\n        return { ok: true, value: parsed }\n      } else {\n        return { error: parsed, ok: false }\n      }\n    } catch (e) {\n      const error: ISDKError = {\n        message:\n          typeof e.message === 'string'\n            ? e.message\n            : `The SDK call was not successful. The error was '${e}'.`,\n        type: 'sdk_error',\n      }\n      return { error, ok: false }\n    }\n  }\n\n  /**\n   * Http method dispatcher from general-purpose request properties\n   * @param props\n   * @returns {request.Request}\n   */\n  protected requestor(props: RequestOptions): Request {\n    const method = props.method?.toString().toUpperCase() as HttpMethod\n    switch (method) {\n      case 'GET':\n        return rq.get(props)\n      case 'PUT':\n        return rq.put(props)\n      case 'POST':\n        return rq.post(props)\n      case 'PATCH':\n        return rq.patch(props)\n      case 'DELETE':\n        return rq.put(props)\n      case 'HEAD':\n        return rq.head(props)\n      default:\n        return rq.get(props)\n    }\n  }\n\n  async stream<TSuccess>(\n    callback: (readable: Readable) => Promise<TSuccess>,\n    method: HttpMethod,\n    path: string,\n    queryParams?: Values,\n    body?: any,\n    authenticator?: Authenticator,\n    options?: Partial<ITransportSettings>\n  ): Promise<TSuccess> {\n    const stream = new PassThrough()\n    const returnPromise = callback(stream)\n    const init = await this.initRequest(\n      method,\n      path,\n      queryParams,\n      body,\n      authenticator,\n      options\n    )\n\n    const streamPromise = new Promise<void>((resolve, reject) => {\n      trace(`[stream] beginning stream via download url`, init)\n      let hasResolved = false\n      const req = this.requestor(init)\n\n      req\n        .on('error', (err) => {\n          if (hasResolved && (err as any).code === 'ECONNRESET') {\n            trace(\n              'ignoring ECONNRESET that occurred after streaming finished',\n              init\n            )\n          } else {\n            trace('streaming error', err)\n            reject(err)\n          }\n        })\n        .on('finish', () => {\n          trace(`[stream] streaming via download url finished`, init)\n        })\n        .on('socket', (socket) => {\n          trace(`[stream] setting keepalive on socket`, init)\n          socket.setKeepAlive(true)\n        })\n        .on('abort', () => {\n          trace(`[stream] streaming via download url aborted`, init)\n        })\n        .on('response', () => {\n          trace(`[stream] got response from download url`, init)\n        })\n        .on('close', () => {\n          trace(`[stream] request stream closed`, init)\n        })\n        .pipe(stream)\n        .on('error', (err) => {\n          trace(`[stream] PassThrough stream error`, err)\n          reject(err)\n        })\n        .on('finish', () => {\n          trace(`[stream] PassThrough stream finished`, init)\n          resolve()\n          hasResolved = true\n        })\n        .on('close', () => {\n          trace(`[stream] PassThrough stream closed`, init)\n        })\n    })\n\n    const results = await Promise.all([returnPromise, streamPromise])\n    return results[0]\n  }\n\n  /**\n   * should the request verify SSL?\n   * @param {Partial<ITransportSettings>} options Defaults to the instance options values\n   * @returns {boolean} true if the request should require full SSL verification\n   */\n  verifySsl(options?: Partial<ITransportSettings>) {\n    if (!options) options = this.options\n    return 'verify_ssl' in options ? options.verify_ssl : true\n  }\n\n  /**\n   * Request timeout in seconds\n   * @param {Partial<ITransportSettings>} options Defaults to the instance options values\n   * @returns {number | undefined}\n   */\n  timeout(options?: Partial<ITransportSettings>): number {\n    if (!options) options = this.options\n    if ('timeout' in options && options.timeout) return options.timeout\n    return defaultTimeout\n  }\n\n  private async initRequest(\n    method: HttpMethod,\n    path: string,\n    queryParams?: any,\n    body?: any,\n    authenticator?: Authenticator,\n    options?: Partial<ITransportSettings>\n  ) {\n    options = options ? { ...this.options, ...options } : this.options\n    if (!options.agentTag) {\n      options.agentTag = agentPrefix\n    }\n    const headers: IRequestHeaders = {\n      [LookerAppId]: options.agentTag,\n      ...options.headers,\n    }\n\n    const requestPath = this.makeUrl(path, options, queryParams)\n    let init: RequestOptions = {\n      body: body || undefined,\n      encoding: null,\n      headers: headers,\n      json: body && typeof body !== 'string',\n      // null = requests are returned as binary so `Content-Type` dictates response format\n      method,\n\n      rejectUnauthorized: this.verifySsl(options),\n\n      // If body is a string, pass as is\n      resolveWithFullResponse: true,\n\n      timeout: this.timeout(options) * 1000,\n      url: requestPath,\n    }\n    if ('encoding' in options) init.encoding = options.encoding\n\n    if (authenticator) {\n      // Automatic authentication process for the request\n      init = await authenticator(init)\n    }\n    return init\n  }\n\n  // /**\n  //  * A streaming helper for the \"json\" data format. It handles automatically parsing\n  //  * the JSON in a streaming fashion. You just need to implement a function that will\n  //  * be called for each row.\n  //  *\n  //  * ```ts\n  //  * await request.streamJson((row) => {\n  //  *   // This will be called for each row of data\n  //  * })\n  //  * ```\n  //  *\n  //  * @returns A promise that will be resolved when streaming is complete.\n  //  * @param onRow A function that will be called for each streamed row, with the row as the first argument.\n  //  */\n  // async streamJson(onRow: (row: { [fieldName: string]: any }) => void) {\n  //   return new Promise<void>((resolve, reject) => {\n  //     let rows = 0\n  //     this.stream(async (readable) => {\n  //       oboe(readable)\n  //         .node(\"![*]\", this.safeOboe(readable, reject, (row) => {\n  //           rows++\n  //           onRow(row)\n  //         }))\n  //         .done(() => {\n  //           winston.info(`[streamJson] oboe reports done`, {...this.logInfo, rows})\n  //         })\n  //     }).then(() => {\n  //       winston.info(`[streamJson] complete`, {...this.logInfo, rows})\n  //       resolve()\n  //     }).catch((error) => {\n  //       // This error should not be logged as it could come from an action\n  //       // which might decide to include user information in the error message\n  //       winston.info(`[streamJson] reported an error`, {...this.logInfo, rows})\n  //       reject(error)\n  //     })\n  //   })\n  // }\n  //\n  // /**\n  //  * A streaming helper for the \"json_detail\" data format. It handles automatically parsing\n  //  * the JSON in a streaming fashion. You can implement an `onFields` callback to get\n  //  * the field metadata, and an `onRow` callback for each row of data.\n  //  *\n  //  * ```ts\n  //  * await request.streamJsonDetail({\n  //  *   onFields: (fields) => {\n  //  *     // This will be called when fields are available\n  //  *   },\n  //  *   onRow: (row) => {\n  //  *     // This will be called for each row of data\n  //  *   },\n  //  * })\n  //  * ```\n  //  *\n  //  * @returns A promise that will be resolved when streaming is complete.\n  //  * @param callbacks An object consisting of several callbacks that will be called\n  //  * when various parts of the data are parsed.\n  //  */\n  // async streamJsonDetail(callbacks: {\n  //   onRow: (row: JsonDetailRow) => void,\n  //   onFields?: (fields: Fieldset) => void,\n  //   onRanAt?: (iso8601string: string) => void,\n  // }) {\n  //   return new Promise<void>((resolve, reject) => {\n  //     let rows = 0\n  //     this.stream(async (readable) => {\n  //       oboe(readable)\n  //         .node(\"data.*\", this.safeOboe(readable, reject, (row) => {\n  //           rows++\n  //           callbacks.onRow(row)\n  //         }))\n  //         .node(\"!.fields\", this.safeOboe(readable, reject, (fields) => {\n  //           if (callbacks.onFields) {\n  //             callbacks.onFields(fields)\n  //           }\n  //         }))\n  //         .node(\"!.ran_at\", this.safeOboe(readable, reject, (ranAt) => {\n  //           if (callbacks.onRanAt) {\n  //             callbacks.onRanAt(ranAt)\n  //           }\n  //         }))\n  //         .done(() => {\n  //           winston.info(`[streamJsonDetail] oboe reports done`, {...this.logInfo, rows})\n  //         })\n  //     }).then(() => {\n  //       winston.info(`[streamJsonDetail] complete`, {...this.logInfo, rows})\n  //       resolve()\n  //     }).catch((error) => {\n  //       // This error should not be logged as it could come from an action\n  //       // which might decide to include user information in the error message\n  //       winston.info(`[streamJsonDetail] reported an error`, {...this.logInfo, rows})\n  //       reject(error)\n  //     })\n  //   })\n  // }\n}\n"],"file":"nodeTransport.js"}